function calculateSectionLengths(labels, table):
    largest = [] length #columns
    for i in range length(labels)
        largest[i] = length(labels[i])

    # Assuming table[i][j] is row i column j
    for i in length(table)
        for j in length(table[i])
            stringContent = toString(table[i][j])
            lengthContent - length(stringContent)
            if lengthContent > largest[j]
                largest[j] = lengthContent

    return largest

function getCenteredLabel(sectionLength, label):
    numWhitespace = sectionLength - length(label)
    numSpace = floor(numWitespace / 2)
    string = ""
    string += repeat(" ", numSpace)
    string += label
    string += repeat(" ", numSpace)
    if isOdd(numWhitespace)
        string += " "
    return string



function getHeader(labels, sectionLengths):
    header = "\u2503"
    for i in range labels
        label = labels[i]
        sectionLength = sectionLengths[i]
        header += " "
        header += getCenteredLabel(sectionLength, label)
        header += " \u2503"
    return header


function getTableWidth(sectionLengths):
    width = 2
    for sectionLength in sectionLengths
        width += sectionLength + 2
    return width

function createRegularLine(sectionLengths):
    return reduce(function(accumulator, current, index) {
        return accumulator + "\u2500".repeat(current + 2)
            + (sectionLengths.length - 1 ? "\u2502" : "\u253C")
    }, "\u2502")

function createTopLine(sectionLengths):
    return reduce(function(accumulator, current, index) {
        return accumulator + "\u2501".repeat(current + 2)
            + (sectionLengths.length - 1 ? "\u2513" : "\u2533")
    }, "\u250F")

function createBottomLine(sectionLengths):
    return reduce(function(accumulator, current, index) {
        return accumulator + "\u2500".repeat(current + 2)
            + (sectionLengths.length - 1 ? "\u2518" : "\u2534")
    }, "\u2514")

function createSectionLine(sectionLengths):
    return reduce(function(accumulator, current, index) {
        return accumulator + "\u2501".repeat(current + 2)
            + (sectionLengths.length - 1 ? "\u2529" : "\u2547")
    }, "\u2521")


# content is a string
function getContentPadded(content, sectionLength)
    contentLength = length(content)
    if sectionLength > contentLength
        return content + repeat(" ", sectionLength - contentLength)
    else
        return content


function printTable(labels, table)
    sectionLengths = calculateSectionLengths(labels, table)
    header = getHeader(labels, sectionLengths)
    topLine = createTopLine(sectionLengths)
    bottomLine = createBottomLine(sectionLengths)
    regularLine = createRegularLine(sectionLengths)
    sectionLine = createSectionLine(sectionLengths)

    printLine(topLine)
    printLine(header)
    printLine(sectionLine)

    for i in range table
        rowString = "\u2502"
        for j in range table[i]
            contentPadded = getContentPadded(table[i][j], sectionLengths[j])
            rowString += (" " + contentPadded + "\u2502"
        printLine(rowString)
        if i == length(table) - 1
            printLine(bottomLine)
        else
            printLine(regularLine)


